
create database libraryManagement;
use libraryManagement;

users
CREATE TABLE Users (
    UserID INT PRIMARY KEY AUTO_INCREMENT,
    Username VARCHAR(50) NOT NULL,
    Password VARCHAR(50) NOT NULL,
    Email VARCHAR(100) UNIQUE NOT NULL,
    UserRole ENUM('admin', 'user') NOT NULL,
    RegistrationDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);



CREATE TABLE Books (
    BookID INT PRIMARY KEY AUTO_INCREMENT,
    Title VARCHAR(100) NOT NULL,
    Author VARCHAR(100),
    Publisher VARCHAR(100),
    ISBN VARCHAR(20) UNIQUE,
    Quantity INT DEFAULT 1,
    Available INT DEFAULT 1,
    AddedDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


wishlist
CREATE TABLE Wishlist (
    WishlistID INT PRIMARY KEY AUTO_INCREMENT,
    UserID INT,
    BookID INT,
    AddedDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (UserID) REFERENCES Users(UserID),
    FOREIGN KEY (BookID) REFERENCES Books(BookID)
);


issuebooks
CREATE TABLE IssuedBooks (
    IssueID INT PRIMARY KEY AUTO_INCREMENT,
    UserID INT,
    BookID INT,
    IssueDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    DueDate DATE,
    ReturnDate TIMESTAMP NULL,
    Fine DECIMAL(5, 2) DEFAULT 0.00,
    FOREIGN KEY (UserID) REFERENCES Users(UserID),
    FOREIGN KEY (BookID) REFERENCES Books(BookID)
);


Fines
CREATE TABLE Fines (
    FineID INT PRIMARY KEY AUTO_INCREMENT,
    UserID INT,
    IssueID INT,
    Amount DECIMAL(5, 2) NOT NULL,
    Paid BOOLEAN DEFAULT FALSE,
    FineDate TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (UserID) REFERENCES Users(UserID),
    FOREIGN KEY (IssueID) REFERENCES IssuedBooks(IssueID)
);
